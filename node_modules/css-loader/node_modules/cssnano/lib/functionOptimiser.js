'use strict';

var postcss = require('postcss');
<<<<<<< HEAD
var parser = require('postcss-value-parser');
=======
var list = postcss.list;
var cssList = require('css-list');
var balancedMatch = require('balanced-match');
>>>>>>> 14e45b6ab8a1ca954f5516d80087167e98f6b292

var functions = [
    'calc',
    'cubic-bezier',
    'gradient',
    'rect',
    'rotate3d',
    'scale',
    'scale3d',
    'transform3d',
    'translate3d',
    'url',
    'var'
];

function optimise (decl) {
<<<<<<< HEAD
    decl.value = parser(decl.value).walk(function (node) {
        if (node.type === 'function') {
            parser.trim(node.nodes);
            if(!~functions.indexOf(node.value)) {
                return false;
            }
        }
        if (node.type === 'div' && node.value === ',') {
            node.before = '';
            node.after = '';
        }
        if (node.type === 'space') {
            node.value = ' ';
        }
    }).toString();
=======
    decl.value = cssList.map(decl.value, function (value, type) {
        if (type !== 'func') {
            return value;
        }
        var match = balancedMatch('(', ')', value);
        if (!~functions.indexOf(match.pre)) {
            return value;
        }
        return [
            match.pre,
            '(',
            list.comma(match.body).map(function (value) {
                return list.space(value).join(' ');
            }).join(','),
            ')',
            match.post
        ].join('');
    });
>>>>>>> 14e45b6ab8a1ca954f5516d80087167e98f6b292
}

module.exports = postcss.plugin('cssnano-function-optimiser', function () {
    return function (css) {
<<<<<<< HEAD
        css.walkDecls(optimise);
=======
        css.eachDecl(optimise);
>>>>>>> 14e45b6ab8a1ca954f5516d80087167e98f6b292
    };
});
