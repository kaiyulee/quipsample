'use strict';

<<<<<<< HEAD
var postcss = require('postcss');
var parser = require('postcss-value-parser');

function filterOptimiser(decl) {
    decl.value = parser(decl.value).walk(function (node) {
        if (node.type === 'function') {
            parser.trim(node.nodes);
        }
        if (node.type === 'div' && node.value === ',') {
            node.before = '';
            node.after = '';
        }
    }).toString();
=======
var balancedMatch = require('balanced-match');
var postcss = require('postcss');
var list = postcss.list;

function filterOptimiser(rule) {
    var match = balancedMatch('(', ')', rule.value);
    if (match) {
        var filterFunc = list.comma(match.body).join(',');
        rule.value = match.pre + '(' + filterFunc + ')' + match.post;
    }
>>>>>>> 14e45b6ab8a1ca954f5516d80087167e98f6b292
}

module.exports = postcss.plugin('cssnano-filter-optimiser', function () {
    return function (css) {
<<<<<<< HEAD
        css.walkDecls(/filter/, filterOptimiser);
=======
        css.eachDecl(/filter/, filterOptimiser);
>>>>>>> 14e45b6ab8a1ca954f5516d80087167e98f6b292
    };
});
